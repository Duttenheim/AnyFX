/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : antlr/grammar/AnyFX.g
 *     -                            On : 2016-02-23 19:50:00
 *     -                 for the lexer : AnyFXLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
AnyFXLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pAnyFXLexer, which is returned from a call to AnyFXLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pAnyFXLexer are  as follows:
 *
 *  - 
 void
      pAnyFXLexer->T__49(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__50(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__51(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__52(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__53(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__54(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__55(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__56(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__57(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__58(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__59(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__60(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__61(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__62(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__63(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__64(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__65(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__66(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__67(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__68(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__69(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__70(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__71(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__72(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__73(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__74(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__75(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__76(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__77(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__78(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__79(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__80(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__81(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__82(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__83(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__84(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__85(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__86(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__87(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__88(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__89(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__90(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__91(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__92(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__93(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__94(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__95(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__96(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__97(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__98(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__99(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__100(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__101(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__102(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__103(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__104(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__105(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__106(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__107(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__108(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__109(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__110(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__111(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__112(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__113(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__114(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->T__115(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->SC(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->CO(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->COL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LP(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->RP(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LB(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->RB(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->RR(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->DOT(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->NOT(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->EQ(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->QO(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->QU(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->AND(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->OR(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->Q(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->NU(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->FORWARDSLASH(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LESS(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LESSEQ(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->GREATER(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->GREATEREQ(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LOGICEQ(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->NOTEQ(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LOGICAND(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->LOGICOR(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->MOD(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->ADD(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->SUB(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->DIV(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->MUL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->INTEGER(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->INTEGERLITERAL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->COMMENT(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->ML_COMMENT(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->FLOATLITERAL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->EXPONENT(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->DOUBLELITERAL(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->HEX(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->ALPHABET(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->IDENTIFIER(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->PATH(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->PREPROCESSOR(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->WS(pAnyFXLexer)
 *  - 
 void
      pAnyFXLexer->Tokens(pAnyFXLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_AnyFXLexer_H
#define _AnyFXLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include <string>


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct AnyFXLexer_Ctx_struct AnyFXLexer, * pAnyFXLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
AnyFXLexer

 */
struct AnyFXLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__49)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__50)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__51)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__52)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__100)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__101)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__102)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__103)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__104)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__105)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__106)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__107)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__108)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__109)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__110)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__111)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__112)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__113)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__114)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mT__115)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mSC)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mCO)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mCOL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLP)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mRP)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLB)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mRB)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mRR)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mQO)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mQU)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mNU)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mFORWARDSLASH)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLESS)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLESSEQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mGREATER)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mGREATEREQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLOGICEQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mNOTEQ)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLOGICAND)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mLOGICOR)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mADD)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mSUB)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mMUL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mINTEGER)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mINTEGERLITERAL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mML_COMMENT)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mFLOATLITERAL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mDOUBLELITERAL)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mALPHABET)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mPATH)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mPREPROCESSOR)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct AnyFXLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct AnyFXLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct AnyFXLexer_Ctx_struct * ctx);
    void	    (*free)   (struct AnyFXLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pAnyFXLexer AnyFXLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pAnyFXLexer AnyFXLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define ADD      4
#define ALPHABET      5
#define AND      6
#define CO      7
#define COL      8
#define COMMENT      9
#define DIV      10
#define DOT      11
#define DOUBLELITERAL      12
#define EQ      13
#define EXPONENT      14
#define FLOATLITERAL      15
#define FORWARDSLASH      16
#define GREATER      17
#define GREATEREQ      18
#define HEX      19
#define IDENTIFIER      20
#define INTEGER      21
#define INTEGERLITERAL      22
#define LB      23
#define LESS      24
#define LESSEQ      25
#define LL      26
#define LOGICAND      27
#define LOGICEQ      28
#define LOGICOR      29
#define LP      30
#define ML_COMMENT      31
#define MOD      32
#define MUL      33
#define NOT      34
#define NOTEQ      35
#define NU      36
#define OR      37
#define PATH      38
#define PREPROCESSOR      39
#define Q      40
#define QO      41
#define QU      42
#define RB      43
#define RP      44
#define RR      45
#define SC      46
#define SUB      47
#define WS      48
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for AnyFXLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
