//------------------------------------------------------------------------------
//  effect.cc
//  (C) 2013 Gustav Sterbrant
//------------------------------------------------------------------------------
#include "./effect.h"
#include <assert.h>
#include "constant.h"

namespace AnyFX
{

//------------------------------------------------------------------------------
/**
*/
Effect::Effect()
{
	// empty
}

//------------------------------------------------------------------------------
/**
*/
Effect::~Effect()
{
	unsigned i;
	for (i = 0; i < programs.size(); i++)
	{
		this->programs[i].Destroy();
	}

	for (i = 0; i < variables.size(); i++)
	{
		this->variables[i].Destroy();
	}

	for (i = 0; i < constants.size(); i++)
	{
		this->constants[i].Destroy();
	}

	for (i = 0; i < renderStates.size(); i++)
	{
		this->renderStates[i].Destroy();
	}

	for (i = 0; i < functions.size(); i++)
	{
		this->functions[i].Destroy();
	}

	for (i = 0; i < structures.size(); i++)
	{
		this->structures[i].Destroy();
	}

	for (i = 0; i < varBlocks.size(); i++)
	{
		this->varBlocks[i].Destroy();
	}

	// delete shaders
	std::map<std::string, Shader*>::iterator it;
	for (it = this->shaders.begin(); it != this->shaders.end(); it++)
	{
		delete it->second;
	}
	this->shaders.clear();
	this->programs.clear();
	this->variables.clear();
	this->constants.clear();
	this->renderStates.clear();
	this->functions.clear();
	this->structures.clear();
	this->varBlocks.clear();
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddProgram( const Program& program )
{
	this->programs.push_back(program);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddVariable( const Variable& var )
{
	this->variables.push_back(var);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddConstant( const Constant& constant )
{
	this->constants.push_back(constant);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddRenderState( const RenderState& state )
{
	this->renderStates.push_back(state);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddFunction( const Function& function )
{
	this->functions.push_back(function);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddStructure( const Structure& structure )
{
	this->structures.push_back(structure);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddVarBlock( const VarBlock& varBlock )
{
	this->varBlocks.push_back(varBlock);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::AddSampler( const Sampler& sampler )
{
	this->samplers.push_back(sampler);
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::Setup()
{
	assert(this->header.GetType() != Header::InvalidType);

	// build shaders, this will make sure we have all the shader programs we need, although they are not complete yet
	unsigned i;
	for (i = 0; i < this->programs.size(); i++)
	{
		this->programs[i].BuildShaders(this->header, this->functions, this->shaders);
	}

	// now, remove all functions which are not bound as shaders
	for (i = 0; i < this->functions.size(); i++)
	{
		// get function
		const Function& func = this->functions[i];

		if (func.IsShader())
		{
			this->functions.erase(this->functions.begin() + i);
			i--;
		}
	}

	// create a placeholder render state, which will be used for programs where no render state is explicitly assigned
	this->placeholderRenderState.SetName("placeholder");

	// sort all variables in varblocks
	for (i = 0; i < this->varBlocks.size(); i++)
	{
		this->varBlocks[i].SortVariables();
	}

	// now, finalize all shaders, this adds all structures, varblocks and functions into all shaders, making sure they compile properly
	// we let the target compiler optimize unnecessary variables and functions away
	std::map<std::string, Shader*>::iterator it;
	for (it = this->shaders.begin(); it != this->shaders.end(); it++)
	{
		Shader* shader = it->second;
		shader->Setup();
	}
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::TypeCheck( TypeChecker& typechecker )
{
	this->header.TypeCheck(typechecker);

	// typecheck all shaders
	std::map<std::string, Shader*>::iterator it;
	for (it = this->shaders.begin(); it != this->shaders.end(); it++)
	{
		Shader* shader = it->second;
		shader->TypeCheck(typechecker);
	}

	// add placeholder render state to type checker
	typechecker.AddSymbol(&this->placeholderRenderState);

	unsigned i;
	for (i = 0; i < this->variables.size(); i++)
	{
		this->variables[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->samplers.size(); i++)
	{
		this->samplers[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->renderStates.size(); i++)
	{
		this->renderStates[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->functions.size(); i++)
	{
		this->functions[i].TypeCheck(typechecker);
		this->functions[i].Restore(this->header, i);
	}

	for (i = 0; i < this->constants.size(); i++)
	{
		this->constants[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->structures.size(); i++)
	{
		this->structures[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->varBlocks.size(); i++)
	{
		this->varBlocks[i].TypeCheck(typechecker);
	}

	for (i = 0; i < this->programs.size(); i++)
	{
		this->programs[i].TypeCheck(typechecker);
	}
}

//------------------------------------------------------------------------------
/**
*/
void 
Effect::Generate( Generator& generator )
{
	// typecheck all shaders
	std::map<std::string, Shader*>::iterator it;
	for (it = this->shaders.begin(); it != this->shaders.end(); it++)
	{
		Shader* shader = it->second;

		// generate code for shaders
		shader->Generate(generator, this->variables, this->structures, this->constants, this->varBlocks, this->functions);
	}
}

//------------------------------------------------------------------------------
/**
*/
void
Effect::Compile( BinWriter& writer )
{
	assert(this->header.GetType() != Header::InvalidType);

	// write magic number
	writer.WriteInt('AFX1');

	// write header, vital!
	this->header.Compile(writer);

	unsigned i;
	
	// compile all shaders
	std::map<std::string, Shader*>::iterator it;
	for (it = this->shaders.begin(); it != this->shaders.end(); it++)
	{
		Shader* shader = it->second;

		// then compile
		shader->Compile(writer);
	}


	// compile render states for runtime
	for (i = 0; i < this->renderStates.size(); i++)
	{
		this->renderStates[i].Compile(writer);
	}

	// compile placeholder render state
	this->placeholderRenderState.Compile(writer);

	// compile programs for runtime
	for (i = 0; i < this->programs.size(); i++)
	{
		this->programs[i].Compile(writer);
	}

	// compile variables for runtime
	for (i = 0; i < this->variables.size(); i++)
	{
		this->variables[i].Compile(writer);
	}

	for (i = 0; i < this->samplers.size(); i++)
	{
		this->samplers[i].Compile(writer);
	}

	// compile varblocks for runtime
	for (i = 0; i < this->varBlocks.size(); i++)
	{
		this->varBlocks[i].Compile(writer);
	}
}

} // namespace AnyFX
